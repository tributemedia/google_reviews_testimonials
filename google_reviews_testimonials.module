<?php

use Drupal\google_reviews_testimonials\Entity\TestimonialGMBReview;
use Drupal\Core\Config\FileStorage;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\node\Entity\Node;

/**
 * Implements hook_cron()
 */
function google_reviews_testimonials_cron() {

  \Drupal::logger('google_reviews_testimonials')
        ->notice('Cron job running.');

  // Every 12 hours
  $interval = 12 * 60 * 60;

  $nextRun = \Drupal::state()->get('google_reviews_testimonials.next_exec');

  if(empty($nextRun)) {

    \Drupal::state()->set('google_reviews_testimonials.next_exec', 
      time() + $interval);

  }
  else {

    // This block queues a job for the review checking worker at the 
    // interval defined above.
    if(time() >= $nextRun) {

      $queueFactory = \Drupal::service('queue');
      $rcQueue = $queueFactory->get('google_reviews_testimonials_rcq');
      $rcQueue->createItem(new \stdClass());
      \Drupal::logger('google_reviews_testimonials')
        ->notice('Review check queued.');

      \Drupal::state()->set('google_reviews_testimonials.next_exec', 
        time() + $interval);

    }

  }

  \Drupal::logger('google_reviews_testimonials')
        ->notice('Cron job finished.');
}

/**
 * Implements hook_entity_delete($entity)
 *
 * WARNING: Facing deprecation due to:
 * https://www.drupal.org/project/drupal/issues/2551893
 */
function google_reviews_testimonials_entity_delete($entity) {

  if($entity instanceof Node && $entity->getType() == 'testimonial') {

    $tid = $entity->id();
    $query = \Drupal::entityQuery('testimonial_gmb_review')
        ->condition('tid', $tid);
    $linkedEntityIDs = $query->execute();
    
    foreach($linkedEntityIDs as $linkedEntityID) {

      $linkedEntity = TestimonialGMBReview::load($linkedEntityID);
      $linkedEntity->delete();
      \Drupal::messenger()
        ->addMessage('Linked TestimonialGMBReview deleted.');

    }

  }

  

}

function google_reviews_testimonials_theme($existing, $type, $theme, $path) {
  
  return [
    'field__field_testimonial_num_stars' => [
      'template' => 'field--field_testimonial_num_stars',
      'base hook' => 'field',
    ],
  ];
  
}

function google_reviews_testimonials_preprocess_field__field_testimonial_num_stars(&$variables) {

  $starPath = file_create_url(drupal_get_path('module', 'google_reviews_testimonials') 
    . '/images/star.svg');

  $variables['stars'] = intval($variables['items'][0]['content']['#markup']);
  $variables['star'] = file_get_contents($starPath);
}

/*
*****************************
*** UPDATES *****************
*****************************
*/


/**
 * Migrate stars field from TestimonialGMBReview to Testimonial
 */
function google_reviews_testimonials_update_9101() {

  // Add new field on Testimonial for stars
  $configPath = drupal_get_path('module', 'google_reviews_testimonials') 
      . '/config/install';
  $configDir = new FileStorage($configPath);
  $fieldConfig = $configDir->read('field.field.node.testimonial.field_testimonial_num_stars');
  $fieldStorageConfig = $configDir->read('field.storage.node.field_testimonial_num_stars');
  $fieldAdded = FALSE;

  if(!FieldStorageConfig::loadByName($fieldStorageConfig['entity_type'], 
    $fieldStorageConfig['field_name'])) {
    
    FieldStorageConfig::create($fieldStorageConfig)->save();

  }
  else {

    \Drupal::messenger()->addMessage('num_stars field storage already added.');

  }
  
  if(!FieldConfig::loadByName($fieldConfig['entity_type'], 
    $fieldConfig['bundle'], $fieldConfig['field_name'])) {

    FieldConfig::create($fieldConfig)->save();
    $fieldAdded = TRUE;

  }
  else {

    \Drupal::messenger()->addMessage('num_stars field already added.');

  }

  // Transfer value from stars field on config entity to testimonial for each review
  if($fieldAdded) {

    $starMappings = [];
    $reviewConfigs = TestimonialGMBReview::loadMultiple();
  
    foreach($reviewConfigs as $reviewConfig) {
      if(isset($reviewConfig->starRating)) {
        $starMappings[$reviewConfig->getTID()] = $reviewConfig->starRating;
      }
    }
  
    $testimonials = Node::loadMultiple(array_keys($starMappings));
    $connection = \Drupal::service('database');
    
    // Starting a transaction to rollback changes in case of failure
    $transaction = $connection->startTransaction();
    foreach($testimonials as $testimonial) {
    
      $starVal = $starMappings[$testimonial->id()];
      $testimonial->set('field_testimonial_num_stars', $starVal);
      $applied = FALSE;
      $attempts = 0;
  
      while(!$applied && !$failed) {
      
        try {
        
          $testimonial->save();
          $applied = TRUE;
  
        }
        catch(\Exception $e) {
        
          if($attempts < 5) {
          
            $attempts++;
  
          }
          else {
          
            $errorMessage = 'Could not save changes to testimonial (ID: ' . $testimonial->id()
              . ').';
            $failed = TRUE;
            \Drupal::messenger()->addError($errorMessage);
            \Drupal::logger('google_reviews_testimonials')->error($errorMessage);
  
          }
  
        }
  
      }
  
      if($failed) {
      
        $transaction->rollback();
        break;
  
      }
  
    }

  }

  // Delete the stars field on the config entity

}