<?php

use Drupal\google_reviews_testimonials\Entity\TestimonialGMBReview;
use Drupal\Core\Config\FileStorage;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\node\Entity\Node;
use Drupal\google_reviews_testimonials\Plugin\QueueWorker\NewReviewCheckWorker;

/**
 * Implements hook_cron()
 */
function google_reviews_testimonials_cron() {

  \Drupal::logger('google_reviews_testimonials')
        ->notice('Cron job running.');

  $nextRun = \Drupal::state()->get('google_reviews_testimonials.next_exec');

  if(empty($nextRun)) {

    NewReviewCheckWorker::setNextExecTime();

  }
  else {

    // This block queues a job for the review checking worker at the 
    // interval defined above.
    if(time() >= $nextRun) {

      $queueFactory = \Drupal::service('queue');
      $rcQueue = $queueFactory->get('google_reviews_testimonials_rcq');
      $rcQueue->createItem(new \stdClass());
      \Drupal::logger('google_reviews_testimonials')
        ->notice('Review check queued.');

      NewReviewCheckWorker::setNextExecTime();

    }

  }

  \Drupal::logger('google_reviews_testimonials')
        ->notice('Cron job finished.');
}

/**
 * Implements hook_entity_delete($entity)
 *
 * WARNING: Facing deprecation due to:
 * https://www.drupal.org/project/drupal/issues/2551893
 */
function google_reviews_testimonials_entity_delete($entity) {

  if($entity instanceof Node && $entity->getType() == 'testimonial') {

    $tid = $entity->id();
    $query = \Drupal::entityQuery('testimonial_gmb_review')
        ->condition('tid', $tid);
    $linkedEntityIDs = $query->execute();
    
    foreach($linkedEntityIDs as $linkedEntityID) {

      $linkedEntity = TestimonialGMBReview::load($linkedEntityID);
      $linkedEntity->delete();
      \Drupal::messenger()
        ->addMessage('Linked TestimonialGMBReview deleted.');

    }

  }

  

}

function google_reviews_testimonials_theme($existing, $type, $theme, $path) {
  
  return [
    'node__testimonial' => [
      'template' => 'node--testimonial',
      'base hook' => 'node'
    ],
    'field__field_testimonial_num_stars' => [
      'template' => 'field--field_testimonial_num_stars',
      'base hook' => 'field',
    ],
    'views_view_field__field_testimonial_num_stars' => [
      'template' => 'field--field_testimonial_num_stars',
      'base hook' => 'view field',
    ],
    'views_view_fields__testimonials__testimonials_page' => [
      'template' => 'testimonials_page_fields',
      'base hook' => 'view fields',
    ],
    'views_view_fields__testimonials__sb_slide_block' => [
      'template' => 'sb_slide_block_fields',
      'base hook' => 'view fields',
    ],
    'views_view_fields__testimonials__sb_block_ref_block' => [
      'template' => 'sb_block_refresh_fields',
      'base hook' => 'view fields',
    ],
    'views_view_fields__testimonials__fw_slide_block' => [
      'template' => 'fw_slide_block_fields',
      'base hook' => 'view fields',
    ],
    'views_view_fields__testimonials__fw_refresh_block' => [
      'template' => 'fw_block_refresh_fields',
      'base hook' => 'view fields',
    ],
  ];
  
}

function google_reviews_testimonials_preprocess_field__field_testimonial_num_stars(&$variables) {

  $variables['stars'] = intval($variables['items'][0]['content']['#markup']);
  setStarPath($variables);

}

/**
 * Only purpose is to add image_set to view templates. Part of a messy solution
 * that is hopefully going to be replaced by the work in #56.
 */
function google_reviews_testimonials_preprocess_views_view_fields(&$variables) {

  if(!empty($variables['fields']['field_testimonial_image']) && 
  strpos($variables['fields']['field_testimonial_image']->content, 'img') !== FALSE) {

    $variables['image_set'] = TRUE;

  }
  
}

function google_reviews_testimonials_preprocess_views_view_field__field_testimonial_num_stars(&$variables) {
  
  if(!empty($variables['row']->_entity->field_testimonial_num_stars->getValue())) {

    $variables['stars'] = 
      intval($variables['row']->_entity->field_testimonial_num_stars->getValue()[0]['value']);
    setStarPath($variables);

  }

}

/**
 * Sets star path information to be used in field templates
 */
function setStarPath(&$variables) {

  $starPath = file_create_url(drupal_get_path('module', 'google_reviews_testimonials') 
    . '/images/star.svg');

  $variables['star'] = file_get_contents($starPath);

}